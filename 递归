案例2：⼩⻘蛙跳台阶  
⼀只⻘蛙⼀次可以跳上1级台阶，也可以跳上2级。求该⻘蛙跳上⼀个n级的台阶总共有多少种跳法。
  
1、第⼀递归函数功能  
假设 f(n) 的功能是求⻘蛙跳上⼀个n级的台阶总共有多少种跳法，代码如下：  
  
2、找出递归结束的条件  
int f(int n){   
if(n == 1){   return 1;   
}  
}  
我说了，求递归结束的条件，你直接把 n 压缩到很⼩很⼩就⾏了，因为 n 越⼩，我们就越容易直观着算出 f(n) 的  
多少，所以当 n = 1时，你知道 f(1) 为多少吧？够直观吧？即 f(1) = 1。代码如下：  
  
第三要素：找出函数的等价关系式  
每次跳跃 小青蛙有两种跳法，    
第一种跳法，小青蛙可以跳跃一个台阶，还剩下n-1阶台阶 剩余台阶总的跳跃次数为f（n-1）     
第二种跳法 ，小青蛙跳了两个台阶，那么剩余n-2阶台阶，剩余跳跃次数为f（n-2）  
每次跳的时候，⼩⻘蛙可以跳⼀个台阶，也可以跳两个台阶，也就是说，每次跳的时候，⼩⻘蛙有两种跳法。  
第⼀种跳法：第⼀次我跳了⼀个台阶，那么还剩下n-1个台阶还没跳，剩下的n-1个台阶的跳法有f(n-1)种。  
第⼆种跳法：第⼀次跳了两个台阶，那么还剩下n-2个台阶还没，剩下的n-2个台阶的跳法有f(n-2)种。  
所以，⼩⻘蛙的全部跳法就是这两种跳法之和了，即 f(n) = f(n-1) + f(n-2)。⾄此，等价关系式就求出来了。于是写  
出代码：  
⼤家觉得上⾯的代码对不对？  
答是不⼤对，当 n = 2 时，显然会有 f(2) = f(1) + f(0)。我们知道，f(0) = 0，按道理是递归结束，不⽤继续往下调⽤  
的，但我们上⾯的代码逻辑中，会继续调⽤ f(0) = f(-1) + f(-2)。这会导致⽆限调⽤，进⼊死循环。  
这⾥有⼈觉得 f(0) 应该是等于 1，等于 0 还是等于 1 不是很重要，此次我们就当作是 0 处理哈  
这也是我要和你们说的，关于递归结束条件是否够严谨问题，有很多⼈在使⽤递归的时候，由于结束条件不够严  
谨，导致出现死循环。也就是说，当我们在第⼆步找出了⼀个递归结束条件的时候，可以把结束条件写进代码，然  
后进⾏第三步，但是请注意，当我们第三步找出等价函数之后，还得再返回去第⼆步，根据第三步函数的调⽤关  
系，会不会出现⼀些漏掉的结束条件。就像上⾯，f(n-2)这个函数的调⽤，有可能出现 f(0) 的情况，导致死循环，  
所以我们把它补上。代码如下    
int f(int n){ //f(0) = 0,f(1) = 1，等价于 n<=2时，f(n) = n。  
if(n <= 2){   
return n;   
}   
ruturn f(n-1) + f(n-2);  
}  
